import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_crashlytics/firebase_crashlytics.dart'; // üî• Crashlytics
import 'package:provider/provider.dart'; // üöÄ Provider for state management
import 'firebase_options.dart'; // generated by flutterfire configure
import 'core/app_theme.dart';
import 'core/error_handler.dart'; // ‚ö†Ô∏è Error handling
import 'presentation/screens/start_page.dart';
import 'modules/auth/screens/login_screen.dart'; // üìÅ New auth module structure
import 'modules/auth/providers/auth_provider.dart' as custom_auth; // üöÄ Auth provider
import 'presentation/navigation/main_navigation.dart';
import 'presentation/screens/splash_screen.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // ‚ö†Ô∏è Initialize global error handling with Crashlytics
  ErrorHandler.initialize();
  
  // üî• Enable Crashlytics collection (set to false for debug builds if needed)
  FirebaseCrashlytics.instance.setCrashlyticsCollectionEnabled(true);

  runApp(const NabdAlHayahApp());
}

class NabdAlHayahApp extends StatefulWidget {
  const NabdAlHayahApp({super.key});

  @override
  State<NabdAlHayahApp> createState() => _NabdAlHayahAppState();
}

class _NabdAlHayahAppState extends State<NabdAlHayahApp> {
  ThemeMode _themeMode = ThemeMode.system;

  @override
  void initState() {
    super.initState();
    _loadThemeMode();
  }

  Future<void> _loadThemeMode() async {
    final savedThemeMode = await AppTheme.getSavedThemeMode();
    setState(() {
      _themeMode = savedThemeMode;
    });
  }

  void updateThemeMode(ThemeMode themeMode) {
    setState(() {
      _themeMode = themeMode;
    });
    AppTheme.saveThemeMode(themeMode);
  }

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        // üöÄ Auth Provider for global authentication state management
        ChangeNotifierProvider(
          create: (_) => custom_auth.AuthProvider(),
        ),
        // Add more providers here as needed
      ],
      child: MaterialApp(
        title: 'Nabd Al-Hayah',
        debugShowCheckedModeBanner: false,
        theme: AppTheme.lightTheme,
        // üé® Removed dark theme - using light theme only
        themeMode: ThemeMode.light, // Always use light theme
        home: ThemeModeProvider(
          updateThemeMode: updateThemeMode,
          child: const RootScreen(),
        ),
      ),
    );
  }
}

class RootScreen extends StatefulWidget {
  const RootScreen({super.key});

  @override
  State<RootScreen> createState() => _RootScreenState();
}

class _RootScreenState extends State<RootScreen> {
  bool _hasShownStartPage = false;

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snapshot) {
        // Still loading ‚Üí show splash
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const SplashScreen();
        }

        // User is logged in ‚Üí go to main navigation
        if (snapshot.hasData) {
          return const MainNavigation();
        }

        // User not logged in ‚Üí show start page first, then login
        if (!_hasShownStartPage) {
          return const StartPage();
        }
        return const LoginScreen();
      },
    );
  }
}

/// ‚úÖ Provider widget for theme mode changes
class ThemeModeProvider extends InheritedWidget {
  const ThemeModeProvider({
    super.key,
    required this.updateThemeMode,
    required Widget child,
  }) : super(child: child);

  final void Function(ThemeMode) updateThemeMode;

  static ThemeModeProvider? of(BuildContext context) {
    return context.dependOnInheritedWidgetOfExactType<ThemeModeProvider>();
  }

  @override
  bool updateShouldNotify(covariant ThemeModeProvider oldWidget) {
    return updateThemeMode != oldWidget.updateThemeMode;
  }
}
